394, Decode String, 03-08-2024, Medium, String and Stack (expand a string using stacks)
853, Car Fleet, 03-08-2024, Medium, Stack and some physics -- go backwards and match cars based on time (time = dist/speed). Slow cars slow down other cars making fleets
217, Contains Duplicate, 03-08-2024, Easy, Use a set to find if there are duplicate numbers
242, Valid Anagram, 03-08-2024, Easy, Use bucket sort to see if 2 strings are anagrams
1, Two Sum, 03-08-2024, Easy, Use dict to keep track of number we have seen already
49, Group Anagrams, 03-08-2024, Medium, use dict to keep track of anagram counts and see which ones are together
347, Top K Frequent Elements, 03-08-2024, Medium, Use heapq to keep track of the largest count for nums
238, Product of Array Except Self, 03-08-2024, Medium, loop thru forward and back to get the product array
128, Longest Consecutive Sequence, 03-08-2024, Medium, use a set for unique values and then loop thru a given value and see if there are numbers next to the number in the set
271, Encode and Decode Strings, 03-08-2024, Medium, Really straight forward string question
36, Valid Sudoku, 03-08-2024, Medium, divide the board into 9 sections and then keep track of things using a set and tuples with row and col data
125, Valid Palindrome, 03-08-2024, Easy, remove non alphas and check if i == -i - 1. Can use 2 pointers as well and move them based on whether there is an alpha or not
167, Two Sum II - Input Array Is Sorted, 03-08-2024, Medium, the array is sorted so if the nums added together are greater than target -- move the larger pointer down 1 and if less then move smaller pointer up 1. Return + 1 of the index bc its not 0 based index
15, ThreeSum, 03-08-2024, Medium, treat it like a + two sum II (so sort the array and do the 2 sum II that we did earlier but with a third value)
666, Path Sum IV, 03-11-2024, Medium, make a dict with [depth (comma) pos] = value and then dfs thru it adding the values starting with left side and going to thru right side
11, Container With Most Water, 03-11-2024, Medium, 2 pointer approach where we use the min height to determine the overall curr area and we move the min height pointer onwards. 
42, Trapping Rain Water, 03-11-2024, Hard, 2 pointer approach - use left and right. Find the local max for left and right values of the array and minus that from curr. If left is bigger than right then move right and vice versa adding all the max - curr to a total
20, Valid Parentheses, 03-11-2024, Easy, use a stack. if there is a valid start then add it to the stack. when a valid end comes check if there is anything in the stack and if that stack top is the end that matches the beginning
115, Min Stack, 03-11-2024, Medium, use 2 stacks. when adding check if the number is less than the top of min stack and when removing be sure to remove both from min stack and regular stack if values match
150, Evaluate Reverse Polish Notation, 03-11-2024, Medium, add nums to stack. when a operator is found then pop off 2 nums and do the operation and push the result back on stack
22, Generate Parentheses, 03-11-2024, Medium, dfs recursively to get all the different options for the parenthesis. use a string to keep track and add to an external array
739, Daily Temperatures, 03-11-2024, Medium, using a stack - check if curr temp is greater than top of stack - if so then find the difference between i and the temp in stack's index and that will be how many days it took for the temp to be greater than before
853, Car Fleet, 03-11-2024, Medium, using a stack - put all the cars together based on which is the slowest car in front and how many bottleneck behind it. Sort the cars by position in descending order. Find the time it takes each car to get to the end and if the time is greater than the car at the top of the stack then add to the stack. returning the len of the stack will get you the number of car fleets
84, Largest Rectangle in Histogram, 03-11-2024, Medium, using a stack -- go thru the heights and push each height and index. if the new height is less than the top of stack then pop and calculate area. if area is bigger than max area then set this area to new max area and finally return the max area 
206, Reverse Linked List, 03-11-2024, Easy, curr.next = prev; prev = curr; curr = curr.next in that order
21, Merge Two Sorted Lists, 03-11-2024, Easy, LinkedList; create a curr and dummy head. loop thru the list1 and list2. whichever val is greater add that to curr and move the corresponding list forward. tie up lose ends at the end of the loop by adding the remaining list values if any
143, Reorder List, 03-11-2024, Medium, 1. Find middle point with fast and slow pointers; 2. reverse second half of list using reverse (curr.next = prev prev = curr curr = curr.next); 3. merge the lists 
19, Remove Nth Node From End of List, 03-11-2024, Medium, use 2 pointer in linked list; fast pointer and slow pointer. move faster pointer n ahead of slow and then move slow and fast to end of the list and skip over fast pointer 
2, Add Two Numbers, 03-11-2024, Medium, Traverse thru the linkedlists adding their values together and having a carry node in case there is more needed
141, LinkedList cycle, 03-11-2024, Easy, Fast and regular pointer -- go thru them and see if fast == regular else false
138, Copy List with Random Pointer, 03-11-2024, Medium, use a dict + traverse twice to make a deep copy
287, Find the duplicate Number, 03-11-2024, Medium, find the cycle and that will be the double number. You can use the nums as indexes
146, LRU Cache, 03-11-2024, Medium, use a dict and capacity int to do this. removing the most recent when reaching capacity
23, Merge k Sorted Lists, 03-12-2024, Hard, use a heapq to store all nodes and then pop them out to and recreate a list
25, Reverse Nodes in k-Group, 03-12-2024, Hard, recursive - divide the into sections and then reverse that section and recursive call for the next section
3, Longest Substring Without Repeating Characters, 03-12-2024, Medium, sliding window -- slide the window by adding/removing letter to a set to find a substring with no repeats. Find the max length for the substrings
424, Longest Repeating Character Replacement, 03-12-2024, Medium, sliding window -- slide the window like earlier but this time see if there difference between most common letter and other letters is <= K. this will determine the length for a longest substring for repeating character
121, Best Time to Buy and Sell Stock, 03-12-2024, Easy, find the min price and find the max price and substract the 2. It needs to be in order so traverse thru the array -- find max profit by max(curr max and price - min price) and find min price by min of the curr min price and price
1465, Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts, 03-12-2024, Medium, find the max gaps and multiply them together to find max area
1197, Minimum Knight Moves, 03-12-2024, Medium, DFS with cache to find the answer
28, Find the Index of the First Occurrence in a String, 03-12-2024, Easy, sliding window and checking if the substring exists (may possibly be on citizen interview)
694, Number of Distinct Islands, 03-12-2024, Medium, bfs with string and set to find distinct islands. Start with the beginning of an island and then move in all directions with bfs. change values for island 
200, Number of Islands, 03-13-2024, Medium, Same bfs as distinct islands but get rid of the string component since we are just counting all the islands not the distinct ones
259, 3Sum Smaller, 03-13-2024, Medium, Like 3sum but we add a counter for the when things are smaller than the target
621, Task Scheduler, 03-13-2024, Medium, use a counter to count the tasks and the number of them. Get the max number of tasks of a type. Get the number of tasks of that == the max number of tasks of a type. get the max number of tasks of a type - 1 * n + 1 + the number of tasks of that == the max number of tasks of a type. return the max len(all tasks) and the prev number
238, Product of Array Except Self, 03-13-2024, Medium, make ans array: [1] * len(given_array). pre = post = 1. Loop thru nums and ans[i] *= pre and ans[-i-1] *= post. new pre and post are got by pre * nums[i] and post * nums[-i-1]
88, Merge Sorted Array, 03-13-2024, Easy, start with finding the end index of each array and the end of the bigger array. start from the end of each array and loop forward comparing the values and adding them to the longer array of the 2. 
198, House Robber, 03-13-2024, Medium, Base case for 1 and 2 houses. If there are more than 2 houses then 1. prev = i[0] and curr = max(i[0] or i[1]). Loop thru the rest of the values. prev = curr and curr = max(val[i] + prev or curr). return curr
856, Score of Parentheses, 03-13-2024, Medium, check if parentheses start and if so then add flag. when they end and there is a flag then 2 * the len - 1 to get score 
213, House Robber II, 03-13-2024, Medium, check edge cases like in robber and then make a helper function -- this function will have a memo that is keep track of the most money and then call this helper with the last index of houses removed or the first index of the houses removed since the houses are looped and we cannot rob adjacent homes
199, Binary Tree Right Side View, 03-13-2024, Medium, BFS but only adding the right side of the tree. do BFS but only run for len of q per iteration so while loop with a for loop inside it. and append the values in the while loop
207, Course schedule, 03-13-2024, Medium, DFS to check if there are cycles. Make an adjacency list and a visited set. DFS with a base case of if visited already -> false and if no adjacent nodes -> True. add current couse to visited then loop thru all prereqs of that course checking dfs(prereq) == False. outside loop remove course from visited and remove array of prereqs from adjacency list for speed optimizations. Last loop thru all the courses and see if dfs returns false if not then it is true
210, Course Schedule II, 03-13-2024, Medium, Same as the course schedule 1 but this time it is a topological sort and you keep track of all the nodes you visited
230, Kth Smallest Element in a BST, 03-13-2024, Medium, inorder traversal with early stopping if ret == k
208, Implement Trie (Prefix Tree), 03-13-2024, Medium, trie which is a hashmap of a hashmap of so on of letters 
465, Optimal Account Balancing, 03-13-2024, Hard, used permutations and recursion to solve this